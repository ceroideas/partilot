<?php
/**
 * Theme functions and definitions.
 * This child theme was generated by YITH Proteo.
 *
 * @link https://developer.wordpress.org/themes/basics/theme-functions/
 */

/*
 * If your child theme has more than one .css file (eg. ie.css, style.css, main.css) then
 * you will have to make sure to maintain all of the parent theme dependencies.
 *
 * Make sure you're using the correct handle for loading the parent theme's styles.
 * Failure to use the proper tag will result in a CSS file needlessly being loaded twice.
 * This will usually not affect the site appearance, but it's inefficient and extends your page's loading time.
 *
 * @link https://codex.wordpress.org/Child_Themes
 */
function yithproteo_child_enqueue_styles() {
    wp_enqueue_style( 'yith-proteo-style', get_template_directory_uri() . '/style.css', array('select2'), YITH_PROTEO_VERSION );
    wp_enqueue_style( 'yith-proteo-child-style',
        get_stylesheet_directory_uri() . '/style.css',
        array( 'yith-proteo-style' ),
        wp_get_theme()->get('Version')
    );
}

add_action(  'wp_enqueue_scripts', 'yithproteo_child_enqueue_styles' );

if( function_exists( 'YITH_Vendors' ) ){
    function yith_wpv_vendor_to_remove_menu_items( $to_remove ){
        $vendor = yith_get_vendor( 'current', 'user' );
        if( $vendor->is_valid() && $vendor->has_limited_access() ){
            $to_remove[] = 'index.php';
        }
        return $to_remove;
    }

    function yith_wcmv_login_redirect( $redirect_to, $request, $user ) {
//is there a user to check?
        if ( isset( $user->roles ) && is_array( $user->roles ) ) {
//check for admins
            if ( in_array( YITH_Vendors()->get_role_name(), $user->roles ) ) {
                $redirect_to = esc_url( add_query_arg( array( 'page' => 'wc-reports' ), admin_url( 'admin.php' ) ) );
            }
        }
        return $redirect_to;
    }
    add_filter( 'yith_wpv_vendor_to_remove_menu_items', 'yith_wpv_vendor_to_remove_menu_items' );
    add_filter( 'login_redirect', 'yith_wcmv_login_redirect', 10, 3 );
}
if( !function_exists('product_type_options_downloads_booking') ) {
    function product_type_options_downloads_booking($options)
    {

        $options['downloadable']['wrapper_class'] .= ' show_if_booking';

        return $options;
    }

    add_filter('product_type_options', 'product_type_options_downloads_booking',99);
}

add_filter( 'yith_wcdp_loop_add_deposit_to_cart_args', 'yith_wcdp_loop_add_deposit_to_cart_set_args', 10,2 );

if( ! function_exists( 'yith_wcdp_loop_add_deposit_to_cart_set_args' ) ){
    function yith_wcdp_loop_add_deposit_to_cart_set_args( $args, $product ){
        $args['product_url'] = $product->get_permalink();
        return $args;
    }
}
if(!function_exists('yith_wcbk_change_services_to_display_order')){ 
    add_filter('yith_wcbk_split_services_by_type', 'yith_wcbk_change_services_to_display_order'); 

    function yith_wcbk_change_services_to_display_order($services_list){ 

        $new_services_list = array( 
            'included' => isset($services_list['included']) ? $services_list['included']: array(), 
            'additional'   => isset($services_list['additional']) ? $services_list['additional']: array(), 
        ); 

        return $new_services_list; 
    } 
}

add_filter( 'yith_wcdp_avoid_exception_rule_creation', '__return_false' );


if ( ! function_exists( 'yith_proteo_account_widget_url_custom' ) ) {
    function yith_proteo_account_widget_url_custom( $url ) {
        $url = get_permalink( get_option( 'woocommerce_myaccount_page_id' ) ) ? get_permalink( get_option( 'woocommerce_myaccount_page_id' ) ) : get_home_url( null, '/my-account/' );

        return $url;
    }
    add_filter( 'yith_proteo_account_widget_url', 'yith_proteo_account_widget_url_custom' );
}

add_filter( 'yith_wcmv_commissions_export_csv_columns', 'yith_wcmv_add_customer_name_and_email_to_export_commissions' );

if( ! function_exists( 'yith_wcmv_add_customer_name_and_email_to_export_commissions' ) ){
    function yith_wcmv_add_customer_name_and_email_to_export_commissions( $columns ){
        $columns[] = 'customer_name';
        $columns[] = 'customer_email';

        return $columns;
    }
}

add_filter( 'yith_wcmv_commissions_export_csv_column_value', 'yith_wcmv_set_value_for_username_and_email_in_export_commissions',10,3 );

if( ! function_exists( 'yith_wcmv_set_value_for_username_and_email_in_export_commissions' ) ){
    function yith_wcmv_set_value_for_username_and_email_in_export_commissions( $value, $key, $commission ){
        if( 'customer_name' === $key ){
            $order = $commission->get_order();
            if( !empty( $order ) ) {
                $value =  $order->get_billing_first_name(). ' '. $order->get_billing_last_name();
            }
        }

        if( 'customer_email' === $key ) {
            $order = $commission->get_order();
            if( !empty( $order ) ) {
                $value =  $order->get_billing_email();
            }
        }
        return $value;
    }
}

if ( ! function_exists( 'yith_wcmv_vendor_additional_capabilities_custom' ) ) {
  function yith_wcmv_vendor_additional_capabilities_custom( $caps ) {

        if ( ! ! $caps ) {
          $caps['manage_bookings'] = false;
      }
      return $caps;
  }
  add_filter( 'yith_wcmv_vendor_additional_capabilities', 'yith_wcmv_vendor_additional_capabilities_custom' );
}

apply_filters( 'yith_wcbk_service_free_text', '__return_empty_string' );

add_filter( 'yith_wcdp_print_deposit_order_item_template', '__return_empty_string' );
if ( ! function_exists( 'yith_wcbk_remove_booking_data_from_emails' ) ) {
    function yith_wcbk_remove_booking_data_from_emails( $data ) {
        if ( isset( $data['order'] ) ) {
            unset( $data['order'] );
        }

        return $data;
    }

    add_filter( 'yith_wcbk_booking_get_booking_data_to_display', 'yith_wcbk_remove_booking_data_from_emails' );
}

add_action( 'yith_wcbk_booking_metabox_info_after_third_column', 'yith_wcbk_show_order_notes_customer_details_in_booking_page' );

if( !function_exists( 'yith_wcbk_show_order_notes_customer_details_in_booking_page' ) ) {
    function yith_wcbk_show_order_notes_customer_details_in_booking_page($booking)
    {
        $order = $booking->get_order();
        if ($order) {

            echo '<p><b>Notes del client</b>: '. $order->get_customer_note() .'</p>';

            if( function_exists('ywccp_get_custom_fields') ) {
                $fields = ywccp_get_custom_fields('additional');

                foreach ($fields as $key => $field) {
                    // Check if value exists for order.
                    $method = "get_{$key}";
                    $value = method_exists($order, $method) ? $order->$method() : $order->get_meta($key);
                    // Get translated field if needed.
                    if ($value) {
                        $field = ywccp_multilingual_single_field($key, $field);
                        $value_text = isset($field['options'][$value]) ? $field['options'][$value] : $value;
                        echo '<p><b>' . $field['label'] . '</b> : ' . $value_text . '</p>';
                    }
                }
            }

        }
    }
}

if ( ! function_exists( 'yith_wcbk_customization_show_booking_data_in_order_items_for_vendors' ) ) {
    add_filter( 'woocommerce_order_item_get_formatted_meta_data', 'yith_wcbk_customization_show_booking_data_in_order_items_for_vendors', 10, 2 );
    function yith_wcbk_customization_show_booking_data_in_order_items_for_vendors( array $formatted_meta, WC_Order_Item $order_item ) {
        $the_booking_id = $order_item->get_meta( '_booking_id' );
        if ( ! $the_booking_id && $order_item->get_meta( 'yith_booking_data' ) && class_exists( 'YITH_Vendors_Orders' ) ) {
            $order = $order_item->get_order();
            if ( $order && ! $order->get_parent_id() ) {
                $suborder_ids = YITH_Vendors_Orders::get_suborders( $order->get_id() );
                $suborder_ids = ! ! $suborder_ids && is_array( $suborder_ids ) ? $suborder_ids : array();
                foreach ( $suborder_ids as $suborder_id ) {
                    $suborder = wc_get_order( $suborder_id );
                    if ( $suborder ) {
                        foreach ( $suborder->get_items() as $suborder_item ) {
                            if ( absint( $suborder_item->get_meta( '_parent_line_item_id' ) ) === $order_item->get_id() ) {
                                $the_booking_id = $suborder_item->get_meta( '_booking_id' );
                                break 2;
                            }
                        }
                    }
                }
            }
        }
        if ( $the_booking_id ) {
            $is_admin = is_admin();
            $is_email = did_action( 'woocommerce_email_header' ) === ( did_action( 'woocommerce_email_footer' ) + 1 );
            $booking  = yith_get_booking( $the_booking_id );
            $b_data   = ! ! $booking && is_callable( array( $booking, 'get_booking_data_to_display' ) ) ? $booking->get_booking_data_to_display( $is_admin && ! $is_email ? 'admin' : 'frontend' ) : array();
            unset( $b_data['order'], $b_data['product'] );
            foreach ( $b_data as $key => $value ) {
                $the_value = $value['display'] ?? '';
                $the_label = $value['label'] ?? '';
                if ( $the_value && $the_label ) {
                    $formatted_meta[] = (object) array(
                        'display_key'   => $the_label,
                        'display_value' => $the_value,
                    );
                }
            }
        }
        return $formatted_meta;
    }
}

if ( ! function_exists( 'yith_wcbk_booking_metabox_info_after_second_column_custom' ) ) {
    /**
     * @param WC_Product_Booking $booking
     * @return void
     */
    function yith_wcbk_booking_metabox_info_after_second_column_custom( $booking ) {
        $order_id = $booking->get_order_id();
        $order    = wc_get_order( $order_id );
        if ( $order instanceof WC_Order ) {
            ?>
            <div class="booking_data_half">

                <div class="form-field form-field-wide"><label><?php esc_html_e( 'Dades Client', 'yith-booking-for-woocommerce' ); ?>:</label>
                    <?php esc_html_e( 'Nom: ' . $order->get_formatted_billing_full_name() ); ?>
                    </br>
                    <?php esc_html_e( 'Email: ' . $order->get_billing_email() ); ?>
                    </br>
                    <?php esc_html_e( 'Telèfon: ' . $order->get_billing_phone() ); ?>
                </div>
            </div>
            <?php
        }
    }
    add_action( 'yith_wcbk_booking_metabox_info_after_second_column', 'yith_wcbk_booking_metabox_info_after_second_column_custom' );

}

if ( ! function_exists( 'yith_wcbk_booking_form_message_bookable_text_custom' ) ) {
    function yith_wcbk_booking_form_message_bookable_text_custom( $bookable_text, $bookable, $from, $to, $product ) {

        $date_format     = ! $product->has_time() ? wc_date_format() : ( wc_date_format() . ' ' . wc_time_format() );
        $from_html       = date_i18n( $date_format, $from );
        $to_html         = date_i18n( $date_format, $to );
        $bookable_status = $bookable ? 'bookable' : 'not-bookable';

        if ( $product->is_full_day() && gmdate( 'Y-m-d', $from ) === gmdate( 'Y-m-d', $to ) ) {
            // translators: 1. bookable or non-bookable status; 2. date.
            $bookable_text = sprintf( __( '<strong>%1$s</strong>: en %2$s', 'yith-booking-for-woocommerce' ), yith_wcbk_get_label( $bookable_status ), $from_html );
        } else {
            // translators: 1. bookable or non-bookable status; 2. start date; 3. end date.
            $bookable_text = sprintf( __( '<strong>%1$s</strong>: Del %2$s al %3$s', 'yith-booking-for-woocommerce' ), yith_wcbk_get_label( $bookable_status ), $from_html, $to_html );
        }

        return $bookable_text;
    }

    add_action( 'yith_wcbk_booking_form_message_bookable_text',
        'yith_wcbk_booking_form_message_bookable_text_custom', 10, 5 );
}
if ( ! function_exists( 'yith_wcdp_change_deposit_message' ) ) {
    function yith_wcdp_change_deposit_message( $message, $deposit_value ) {
        $message = 'Consulteu el llistat de preus del refugi. Aquest import es la bestreta. La resta ho pagareu al allotjament. Qualsevol descompte per federats, convenis, tarifes infantils, etc. s\'aplicaran directament al refugi. Ara pagareu una paga i senyal de: ';

        return $message;
    }

    add_filter( 'yith_wcdp_deposit_only_message', 'yith_wcdp_change_deposit_message', 10, 2 );
}

add_action( 'template_redirect', 'woo_custom_redirect_after_purchase' );
function woo_custom_redirect_after_purchase() {
    global $wp;
    if ( is_checkout() && !empty( $wp->query_vars['order-received'] ) ) {
        wp_redirect( 'https://refugisdecatalunya.com/reserva-completada-correctament/' );
        exit;
    }
}

add_filter('woocommerce_checkout_get_value','__return_empty_string',10);

if ( ! function_exists( 'yith_wcbk_customization_show_booking_data_in_order_items' ) ) {
    add_filter( 'woocommerce_order_item_get_formatted_meta_data', 'yith_wcbk_customization_show_booking_data_in_order_items', 10, 2 );
    function yith_wcbk_customization_show_booking_data_in_order_items( array $formatted_meta, WC_Order_Item $order_item ) {
        $the_booking_id = $order_item->get_meta( '_booking_id' );
        if ( ! $the_booking_id && $order_item->get_meta( 'yith_booking_data' ) && class_exists( 'YITH_Vendors_Orders' ) ) {
            $order = $order_item->get_order();
            if ( $order && ! $order->get_parent_id() ) {
                $suborder_ids = YITH_Vendors_Orders::get_suborders( $order->get_id() );
                $suborder_ids = ! ! $suborder_ids && is_array( $suborder_ids ) ? $suborder_ids : array();
                foreach ( $suborder_ids as $suborder_id ) {
                    $suborder = wc_get_order( $suborder_id );
                    if ( $suborder ) {
                        foreach ( $suborder->get_items() as $suborder_item ) {
                            if ( absint( $suborder_item->get_meta( '_parent_line_item_id' ) ) === $order_item->get_id() ) {
                                $the_booking_id = $suborder_item->get_meta( '_booking_id' );
                                break 2;
                            }
                        }
                    }
                }
            }
        }
        if ( $the_booking_id ) {
            $is_admin = is_admin();
            $is_email = did_action( 'woocommerce_email_header' ) === ( did_action( 'woocommerce_email_footer' ) + 1 );
            $booking  = yith_get_booking( $the_booking_id );
            $b_data   = ! ! $booking && is_callable( array( $booking, 'get_booking_data_to_display' ) ) ? $booking->get_booking_data_to_display( $is_admin && ! $is_email ? 'admin' : 'frontend' ) : array();
            unset( $b_data['order'], $b_data['product'] );
            foreach ( $b_data as $key => $value ) {
                $the_value = $value['display'] ?? '';
                $the_label = $value['label'] ?? '';
                if ( $the_value && $the_label ) {
                    $formatted_meta[] = (object) array(
                        'display_key'   => $the_label,
                        'display_value' => $the_value,
                    );
                }
            }
        }
        return $formatted_meta;
    }
}


if ( ! function_exists( 'yith_wcbk_customize_csv_fields' ) ) {
    add_filter( 'yith_wcbk_csv_fields', 'yith_wcbk_customize_csv_fields' );
    function yith_wcbk_customize_csv_fields( $fields ) {
        $fields[] = 'order_customer_note';
        $fields[] = 'booking_price';
        return $fields;
    }
}

if ( ! function_exists( 'yith_wcbk_csv_add_field_order_customer_note' ) ) {
    add_filter( 'yith_wcbk_csv_field_order_customer_note', 'yith_wcbk_csv_add_field_order_customer_note', 10, 3 );
    function yith_wcbk_csv_add_field_order_customer_note( $val, $booking ) {
        $order = ! empty( $booking->get_order_id() ) ? wc_get_order( $booking->get_order_id()) : false;
        if ( ! empty( $order ) ){
                $parent_id = $order->get_parent_id();
                $parent_order = wc_get_order( $parent_id );
                if( $parent_order ) {
                    $order = $parent_order;
                }
                $val = $order->get_customer_note();
                if( function_exists('ywccp_get_custom_fields') ) {
                    $fields = ywccp_get_custom_fields('additional');
   
                    foreach ($fields as $key => $field) {
                        // Check if value exists for order.
                        $method = "get_{$key}";
                        $value = method_exists($order, $method) ? $order->$method() : $order->get_meta($key);
                        // Get translated field if needed.
                        if ($value) {
                            $field = ywccp_multilingual_single_field($key, $field);
                            $value_text = isset($field['options'][$value]) ? $field['options'][$value] : $value;
                            $val .=' '.$value_text;
                        }
                    }
                }
               

        }
        return $val;
    }
}

add_filter('yith_wcbk_is_upcoming_view','__return_false');


if( !function_exists( 'yith_wcbk_show_note_in_calendar' ) ){
    function yith_wcbk_show_note_in_calendar( $booking ){
        if( ! $booking instanceof YITH_WCBK_Booking ){
            return;
        }
        $amount = $booking->get_calculated_price();
        if ( false !== $amount ) {
             $amount = wc_get_price_including_tax( $booking->get_product(), array( 'price' => $amount ) );
        }
        $order_id = $booking->get_order_id();
        $order = wc_get_order( $order_id );
        if ( $order instanceof WC_Order ){

            $parent_id = $order->get_parent_id();
            $parent_order = wc_get_order( $parent_id );
            if( $parent_order ) {
                $order = $parent_order;
            }

            if( function_exists('ywccp_get_custom_fields') ) {
                $fields = ywccp_get_custom_fields('additional');

                foreach ($fields as $key => $field) {
                    // Check if value exists for order.
                    $method = "get_{$key}";
                    $value = method_exists($order, $method) ? $order->$method() : $order->get_meta($key);
                    // Get translated field if needed.
                    if ($value) {
                        $field = ywccp_multilingual_single_field($key, $field);
                        $value_text = isset($field['options'][$value]) ? $field['options'][$value] : $value;
                        ?>
                        <tr>
                            <th><?php echo $field['label'] .':'; ?></th>
                            <td><?php echo $value_text; ?></td>
                        </tr>
                        <?php
                    }
                }
            }
            ?>
            <tr>
                <th>Email</th>
                <td><?php echo $order->get_billing_email(); ?></td>
            </tr>
            <tr>
                <th>Telèfon</th>
                <td><?php echo $order->get_billing_phone(); ?></td>
            </tr>
            <tr>
                <th>Bestreta</th>
                <td><?php echo $amount; ?></td>
            </tr>
            <?php
        }
    }
    add_action( 'yith_wcbk_calendar_single_booking_data_table_after', 'yith_wcbk_show_note_in_calendar' );
}

if ( ! function_exists( 'custom_admin_styles_yith_booking_custom1' ) ) {
    function custom_admin_styles_yith_booking_custom1() {
            echo '<style>
                .yith-plugin-ui--yith_booking-post_type table.wp-list-table .column-user .meta.email{
                    display: none;
                 }
                </style>';
    }   
    add_action( 'admin_head', 'custom_admin_styles_yith_booking_custom1', 99 );
}

if ( ! function_exists( 'yith_wcbk_custom_calendar_availability_classes' ) ) { 
    add_filter( 'yith_wcbk_booking_calendar_availability_classes', 'yith_wcbk_custom_calendar_availability_classes', 99, 3 ); 
    function yith_wcbk_custom_calendar_availability_classes( $classes, $availability, $product ) { 
        if ( ! empty( $availability ) && $availability['bookable'] <= 0 ){ 
            $classes[] = 'yith-wcbk-booking-calendar-availability--overbooked'; 
        } 
        return $classes; 
    } 
} 
    
if ( ! function_exists( 'yith_wcbk_admin_custom_calendar_availability_style' ) ) { 
    add_action( 'admin_enqueue_scripts', 'yith_wcbk_admin_custom_calendar_availability_style', 99 ); 
    function yith_wcbk_admin_custom_calendar_availability_style() { 
        $css_fix = ' 
        .yith-wcbk-booking-calendar-availability.yith-wcbk-booking-calendar-availability--overbooked { 
        color: red !important; 
        } 
        '; 
        wp_add_inline_style( 'yith-wcbk-admin', $css_fix ); 
    } 
}

if ( !class_exists( 'YITH_WCBK_Customization_CSV_Fields' ) ) {
    class YITH_WCBK_Customization_CSV_Fields {
        private static $_fields = array( 'user_firstname', 'user_lastname', 'user_email', 'user_phone' );

        public static function init() {
            add_filter( 'yith_wcbk_csv_fields', array( __CLASS__, 'manage_fields' ) );
            add_filter( 'yith_wcbk_csv_field_value', array( __CLASS__, 'manage_field_value' ), 10, 3 );
        }

        public static function manage_fields( $fields ) {
            unset( $fields[ 'order_id' ] );
            return array_merge( array( 'order_id' ), $fields, self::$_fields );
        }

        public static function manage_field_value( $value, $field, $booking ) {
            if ( in_array( $field, self::$_fields ) && $booking->get_order_id() && $order = wc_get_order( $booking->get_order_id() ) ) {
                switch ( $field ) {
                    case 'user_firstname':
                        $value = $order->get_billing_first_name();
                        break;
                    case 'user_lastname':
                        $value = $order->get_billing_last_name();
                        break;
                    case 'user_email':
                        $value = $order->get_billing_email();
                        break;
                    case 'user_phone':
                        $value = $order->get_billing_phone();
                        break;
                }
            }
            return $value;
        }
    }

    YITH_WCBK_Customization_CSV_Fields::init();
}

if( ! function_exists( 'yith_wcmv_commissions_export_csv_column_value_change_decimal_for_amounts_values' ) ) {
    function yith_wcmv_commissions_export_csv_column_value_change_decimal_for_amounts_values( $v, $key, $commission ) {
        switch ( $key ) {
            case 'amount':
                $v = wc_format_decimal( $commission->get_amount('edit'), '' );
                break;

            case 'amount_refunded':
                $v = wc_format_decimal( $commission->get_amount_refunded('edit'), '' );
                break;

            case 'to_pay':
                $v = wc_format_decimal( $commission->get_amount_to_pay('edit'), '' );
                break;
        }

        return $v;
    }
    add_filter( 'yith_wcmv_commissions_export_csv_column_value', 'yith_wcmv_commissions_export_csv_column_value_change_decimal_for_amounts_values', 10, 3 );
}

if ( !function_exists( 'yith_wcbk_customization_radio_services' ) ) {
    function yith_wcbk_customization_radio_services() {
        $custom_js = "jQuery( function ( $ ) {
                $( '.yith-wcbk-booking-form' ).each( function () {
                    var bookingForm       = $( this ),
                        services = bookingForm.find( 'input.yith-wcbk-booking-service[type=checkbox]' );
                        services.attr('type', 'radio').hide();
                        services.first().attr('checked', 'checked').trigger('change');
                } );
            } );";
        wp_add_inline_script( 'yith-wcbk-booking-form', $custom_js );
    }

    add_action( 'wp_enqueue_scripts', 'yith_wcbk_customization_radio_services', 999 );
}


if( function_exists('yith_wcbk') ) {
    remove_action('woocommerce_checkout_order_processed', array(yith_wcbk()->orders, 'check_order_for_booking'), 999, 2);
    remove_action( 'woocommerce_order_status_processing', array( yith_wcbk()->orders, 'set_booking_as_paid' ), 10, 2 );

    add_action( 'woocommerce_order_status_completed', array( yith_wcbk()->orders, 'check_order_for_booking'), 8, 2 );
    //add_action( 'woocommerce_order_status_processing', array( yith_wcbk()->orders, 'check_order_for_booking'), 8, 2 );
}

add_filter( 'yith_wcbk_orders_set_booking_as_paid', 'yith_wcbk_prevent_generate_booking_and_also_set_as_paid_on_parent_orders', 50, 3 );
add_filter( 'yith_wcbk_order_check_order_for_booking','yith_wcbk_prevent_generate_booking_and_also_set_as_paid_on_parent_orders', 10, 3 );

if( ! function_exists( 'yith_wcbk_prevent_generate_booking_and_also_set_as_paid_on_parent_orders' ) ){
    function yith_wcbk_prevent_generate_booking_and_also_set_as_paid_on_parent_orders( $set_paid, $order_id, $order ){

        $has_suborders = ! ! get_post_meta( $order_id, 'has_sub_order', true );
        if ( $has_suborders ) {
            // parent order.
            $set_paid= false;
        }

        return $set_paid;
    }
}

if ( ! function_exists( 'yith_wcbk_custom_client_notes_at_paid_email' ) ) {
    add_action( 'yith_wcbk_email_after_booking_table', 'yith_wcbk_custom_client_notes_at_paid_email', 12, 4 );
    function yith_wcbk_custom_client_notes_at_paid_email( $booking, $sent_to_admin, $plain_text, $email ) {
        $product = wc_get_product( $booking->get_product_id() );
        if ( ! empty( $product ) && ! empty( $product->get_purchase_note() ) ) {
            echo '<div class="purchase-note">';
            echo '<h2>' . __( 'Purchase note', 'woocommerce' ) . '</h2>';
            echo '<p>' . $product->get_purchase_note() . '</p>';
            echo '<div class="purchase-note">';
        }
    }
}

if( !function_exists('yith_wcbk_admin_query_fiters_vars_restric_from_date') ) {
    function yith_wcbk_admin_query_fiters_vars_restric_from_date($query_vars)
    {

        $date_from = !empty($_REQUEST['date_from']) ? sanitize_text_field(wp_unslash($_REQUEST['date_from'])) : false;
        $date_to = !empty($_REQUEST['date_to']) ? sanitize_text_field(wp_unslash($_REQUEST['date_to'])) : false;
        $meta_query = !empty($query_vars['meta_query']) ? $query_vars['meta_query'] : array();

        if ($date_from && !$date_to) {
            $date_from_final = $date_from . ' ' . '23:59:59';
            $meta_query[] = array(
                'key' => '_from',
                'value' => strtotime($date_from_final),
                'compare' => '<=',
            );
            $query_vars['meta_query'] = $meta_query;
        }


        return $query_vars;
    }

    add_filter('yith_wcbk_admin_query_filters_vars', 'yith_wcbk_admin_query_fiters_vars_restric_from_date');
}

remove_action( 'yith_wcbk_booking_form_content', array( YITH_WCBK_Resources_Products::get_instance(), 'maybe_print_resource_field' ), 5, 1 );
add_action( 'yith_wcbk_booking_form_content', array( YITH_WCBK_Resources_Products::get_instance(), 'maybe_print_resource_field' ), 35, 1 );

if( !function_exists('yith_wcmv_filter_report_get_order_args') ) {
    add_filter('woocommerce_reports_get_order_report_data_args', 'yith_wcmv_filter_report_get_order_args');
    /**
     * Set reports args
     *
     * @param array $args The query args.
     * @return array The new query args.
     * @since    1.0
     * @author   YITH
     */
    function yith_wcmv_filter_report_get_order_args($args)
    {
        // phpcs:disable WordPress.Security.NonceVerification
        $vendor = yith_wcmv_get_vendor('current', 'user');

        // Check for report: If no report selected set report to default value "Sales by Date".
        $report = 'sales_by_date';

        if (isset($_GET['report'])) {
            $report = sanitize_text_field(wp_unslash($_GET['report']));
        } elseif (isset($_GET['tab'])) {
            // Tab with one report don't have report field in query args.
            $report = sanitize_text_field(wp_unslash($_GET['tab']));
        }

        if ($vendor->is_valid() && $vendor->has_limited_access()) {
            if ('sale_commissions' === $report || 'commissions' === $report || 'sales_by_product' === $report || 'sales_by_category' === $report) {
                $orders = $vendor->get_orders();

                $args['where'] = array(
                    array(
                        'key' => 'posts.ID',
                        'operator' => 'in',
                        'value' => !empty($orders) ? $orders : -1,
                    ),
                );
            } elseif ('sales_by_product' === $report) {

                $filter = false;
                $products = $vendor->get_products();

                $filtered_where_meta = array(
                    'type' => 'order_item_meta',
                    'meta_key' => '_product_id', // phpcs:ignore
                    'meta_value' => !empty($products) ? $products : -1, // phpcs:ignore
                    'operator' => 'in',
                );

                // No products filter active.
                if (!isset($_GET['product_ids'])) {
                    $filter = true;
                } else { // Products filter active.
                    if (!isset($args['where_meta'])) { // Top Sellers.
                        $filter = true;
                    } elseif (isset($args['data']) && isset($args['data']['_qty']) && isset($args['data']['_product_id']) && isset($args['where_meta'])) { // Top Earners and Top Freebies.
                        $top_earners = array(
                            'type' => 'order_item_meta',
                            'meta_key' => '_line_subtotal', // phpcs:ignore
                            'meta_value' => '0', // phpcs:ignore
                            'operator' => '>',
                        );

                        $top_freebies = array(
                            'type' => 'order_item_meta',
                            'meta_key' => '_line_subtotal', // phpcs:ignore
                            'meta_value' => '0', // phpcs:ignore
                            'operator' => '=',
                        );

                        if (in_array($top_earners, $args['where_meta']) || in_array($top_freebies, $args['where_meta'])) {
                            $filter = true;
                        }
                    }
                }

                if ($filter) {
                    $args['where_meta'][] = $filtered_where_meta;
                }
            }
        } elseif (current_user_can('manage_woocommerce')) {
            // Orders Report.
            $orders_report = array(
                'sales_by_date',
                'sales_by_product',
                'sales_by_category',
                'coupon_usage',
                'orders',
            );

            if (in_array($report, $orders_report, true) || 'customers' === $report || 'customer_list' === $report) {

                $group_by_refund_id = isset($args['group_by']) && 'refund_id' === $args['group_by'];

                if ($group_by_refund_id) {

                    $date_range = !empty($_GET['range']) ? sanitize_text_field(wp_unslash($_GET['range'])) : '7day';
                    $first_day_current_month = strtotime(date('Y-m-01', time()));

                    $date_query = array(
                        '7day' => array(
                            array(
                                'after' => '1 week ago',
                            ),
                        ),
                        'month' => array(
                            array(
                                'after' => date('Y-m-01', time()),
                                'inclusive' => true,
                            ),
                        ),
                        'last_month' => array(
                            array(
                                'after' => date('Y-m-01', strtotime('-1 DAY', $first_day_current_month)),
                                'before' => date('Y-m-t', strtotime('-1 DAY', $first_day_current_month)),
                                'inclusive' => true,
                            ),
                        ),
                        'year' => array(
                            array(
                                'after' => date('Y-01-01', time()),
                                'inclusive' => true,
                            ),
                        ),
                        'custom' => array(
                            array(
                                'after' => !empty($_GET['start_date']) ? sanitize_text_field(wp_unslash($_GET['start_date'])) : '',
                                'before' => !empty($_GET['end_date']) ? sanitize_text_field(wp_unslash($_GET['end_date'])) : '',
                                'inclusive' => true,
                            ),
                        ),
                    );

                    $parent_order = get_posts(
                        array(
                            'post_type' => 'shop_order',
                            'post_parent' => 0,
                            'post_status' => -1,
                            'fields' => 'ids',
                            'posts_per_page' => -1,
                            'date_query' => $date_query[$date_range],
                        )
                    );

                    if ($parent_order) {
                        $args['data']['post_parent'] = array(
                            'type' => 'post_data',
                            'function' => '',
                            'name' => 'parent_order_id',
                        );

                        if (!array_search('refunded', $args['parent_order_status'], true)) {
                            $args['parent_order_status'][] = 'refunded';
                        }

                        $args['where'] = array(
                            array(
                                'key' => 'posts.post_parent',
                                'operator' => 'IN',
                                'value' => $parent_order,
                            ),
                        );
                    }
                } else {
                    $args['where'] = array(
                        array(
                            'key' => 'posts.post_parent',
                            'operator' => '=',
                            'value' => 0,
                        ),
                    );
                }
            }
        }
        return $args;
        // phpcs:enable WordPress.Security.NonceVerification
    }
}

// personalizar frase Gracias por crear con WordPress
function modify_footer_admin () {
  echo 'Central de Reserves · Refugis de Catalunya®</a>';
}
add_filter('admin_footer_text', 'modify_footer_admin');

if ( ! function_exists( 'yith_wcbk_custom_booking_statuses' ) ) {
 add_filter( 'yith_wcbk_booking_statuses', 'yith_wcbk_custom_booking_statuses', 11, 1 );
 function yith_wcbk_custom_booking_statuses( $statuses ) {
        $statuses['partially_paid'] = 'Nota de la Central';
 return $statuses;
    }
}

add_action('admin_head', 'yith_wcbk_add_admin_style_for_booking_calendar');

add_action('admin_head', 'yith_wcbk_add_admin_style_for_booking_calendar');

function yith_wcbk_add_admin_style_for_booking_calendar() {
    echo '<style>
        .yith-wcbk-booking-calendar-single-booking.partially_paid {
            background: fuchsia;
        }
       
        .yith-wcbk-booking-calendar__status-legend__item.partially_paid .yith-wcbk-booking-calendar__status-legend__item__indicator{
            background: fuchsia;
        }
        .yith-plugin-ui--yith_booking-post_type td.status.column-status span.yith-booking-status.partially_paid {
            background-color: fuchsia;
        }

  </style>';
}

if ( ! function_exists( 'yith_wcbk_customization_block_dates_for_custom_booking_status' ) ) {
    add_filter( 'yith_wcbk_get_booked_statuses', 'yith_wcbk_customization_block_dates_for_custom_booking_status', 10, 1 );
    function yith_wcbk_customization_block_dates_for_custom_booking_status( $statuses ) {
        $statuses[] = 'bk-partially_paid';

        return $statuses;
    }
}

if( !function_exists('yith_wcbk_customization_autoscroll_popup') ){

    add_action( 'wp_footer','yith_wcbk_customization_autoscroll_popup' );

    function yith_wcbk_customization_autoscroll_popup(){

        $script = "
            <script>
            jQuery( document ).on( 'click', '.ypop-footer .fasc-button', function(e){
                e.preventDefault();
               jQuery( '.ypop-wrapper .close' ).click();
                const anchorRag = jQuery('li#tab-title-description');
                jQuery('html,body').animate({scrollTop: anchorRag.offset().top},'slow');
            } )

    </script>

    ";
        echo $script;
    }
}

add_filter( 'yith_proteo_account_widget_text_not_logged', 'add_login_message_before_nav' );
function add_login_message_before_nav($output) {
    if ( ! is_user_logged_in() ) {
        $message = '<a href="https://refugisdecatalunya.com/my-account/"> INICIAR SESSIÓ</a>';
        $output  = $message . $output;
        return $output;
    }
}

add_filter( 'yith_wcbk_admin_no_user_info_html', 'yith_wcbk_customize_admin_no_user_info_html',10,2 );

if( ! function_exists( 'yith_wcbk_customize_admin_no_user_info_html' ) ){
    function yith_wcbk_customize_admin_no_user_info_html( $html, $booking ){
        $order = $booking->get_order();
        if( isset( $order ) && $order instanceof WC_Order ){
            $html = $order->get_billing_first_name() . ' ' . $order->get_billing_last_name();
        }
        return $html;
    }
}
 
if ( ! function_exists( 'yith_wcbk_customize_calendar_booking_title' ) ) {
    add_filter( 'yith_wcbk_calendar_booking_title', 'yith_wcbk_customize_calendar_booking_title', 10, 2 );
    add_filter( 'yith_wcbk_calendar_single_booking_data_booking_title', 'yith_wcbk_customize_calendar_booking_title', 10, 2 );
    function yith_wcbk_customize_calendar_booking_title( $title, $booking ) {
        if( $booking instanceof YITH_WCBK_Booking ){
            $user_data = get_userdata( $booking->user_id );
            $order     = wc_get_order( $booking->get_order_id() );
            $user_info = $user_data instanceof WP_User ? $user_data->first_name . ' ' . $user_data->last_name : ( ( $order instanceof WC_Order ) ? $order->get_billing_first_name() . ' ' . $order->get_billing_last_name() : '' );
            $title     = '#' . $booking->get_id() . ' ' . $user_info;
        }

        return $title;
    }
}

if ( ! function_exists( 'yith_wcbk_show_billing_name_on_email' ) ) {
    add_filter( 'yith_wcbk_email_placeholders', 'yith_wcbk_show_billing_name_on_email', 10, 2 );
    function yith_wcbk_show_billing_name_on_email( $placeholder, $email ) {
        if ( empty( $placeholder['{customer_name}'] )  ) {
            $order = wc_get_order( $email->object->get_order_id() );
            if ( $order ) {
                $placeholder['{customer_name}'] = $order->get_billing_first_name() . ' ' . $order->get_billing_last_name();
            }
        }
        return $placeholder;
    }
}


add_filter('auth_cookie_expiration', 'tiempo_expiracion_cookies');


function tiempo_expiracion_cookies($date) {

   return 43200; // 12 Horas Cierre de Sesión

}

if( !function_exists('yith_wcbk_add_codes_after_booking_table') ) {

    function yith_wcbk_add_codes_after_booking_table($booking, $sent_to_admin, $plain_text, $email)
    {

        $order_id = $booking->get_order_id();
        $order = wc_get_order( $order_id );
        if ( $order instanceof WC_Order ){

            $parent_id = $order->get_parent_id();
            $parent_order = wc_get_order( $parent_id );
            if( $parent_order ) {
                $order = $parent_order;
            }

            if( function_exists('ywccp_get_custom_fields') ) {
                $fields = ywccp_get_custom_fields('additional');

                foreach ($fields as $key => $field) {
                    // Check if value exists for order.
                    $method = "get_{$key}";
                    $value = method_exists($order, $method) ? $order->$method() : $order->get_meta($key);
                    // Get translated field if needed.
                    if ($value) {
                        $field = ywccp_multilingual_single_field($key, $field);
                        $value_text = isset($field['options'][$value]) ? $field['options'][$value] : $value;
                        ?>
                        <div style='margin: 15px 0'>
                            <table>
                                <tr>
                                    <th><?php echo $field['label'] .':'; ?></th>
                                    <td><?php echo $value_text; ?></td>
                                </tr>
                            </table>
                        </div>
                        <?php
                    }
                }
            }

        }
    }
    add_action('yith_wcbk_email_after_booking_table', 'yith_wcbk_add_codes_after_booking_table', 20, 4);

}

/*if ( ! function_exists( 'yith_wcbk_csv_add_field_booking_price' ) ) {
    add_filter( 'yith_wcbk_csv_field_booking_price', 'yith_wcbk_csv_add_field_booking_price', 10, 3 );
    function yith_wcbk_csv_add_field_booking_price( $val, $booking ) {
        $amount = $booking->get_sold_price( true );
        if ( false === $amount && apply_filters( 'yith_wcbk_admin_booking_show_calculated_amount', $booking->has_status( array( 'pending-confirm', 'confirmed' ) ), $booking ) ) {
            $amount = $booking->get_calculated_price();
            if ( false !== $amount ) {
                $amount = wc_get_price_including_tax( $booking->get_product(), array( 'price' => $amount ) );
            }
        }
        $val = false !== $amount ? $amount : '&ndash;';
        return $val;
    }
}*/

if ( ! function_exists( 'yith_wcbk_csv_add_field_booking_price' ) ) {
    add_filter( 'yith_wcbk_csv_field_booking_price', 'yith_wcbk_csv_add_field_booking_price', 10, 3 );
    function yith_wcbk_csv_add_field_booking_price( $val, $booking ) {
        $args = array(
            'decimal_separator'  => wc_get_price_decimal_separator(),
            'thousand_separator' => wc_get_price_thousand_separator(),
            'decimals'           => wc_get_price_decimals(),
        );

        $amount = $booking->get_sold_price( true );
        if ( false === $amount && apply_filters( 'yith_wcbk_admin_booking_show_calculated_amount', $booking->has_status( array( 'pending-confirm', 'confirmed' ) ), $booking ) ) {
            
            $amount = $booking->get_calculated_price();
            if ( false !== $amount ) {
                error_log('YITH2');
                $amount = wc_get_price_including_tax( $booking->get_product(), array( 'price' => $amount ) );
            }
        }
        $val = false !== $amount ? number_format( $amount, $args['decimals'], $args['decimal_separator'], $args['thousand_separator'] ) : '&ndash;';
        return $val;
    }
}

if ( ! function_exists( 'yith_wcbk_open_from_calendar_in_mobile_fix' ) ) {
    function yith_wcbk_open_from_calendar_in_mobile_fix() {
        $js = " 
        jQuery( document ).on( 'click', '.yith-wcbk-mobile-fixed-form__overlay', () => {
          console.log('here');
           jQuery( jQuery( '.yith-wcbk-booking-start-date' ).data( 'on-select-open' ) ).trigger( 'focus' );
        } );
        ";
        wp_add_inline_script('woocommerce', $js);
    }
    add_action('wp_enqueue_scripts', 'yith_wcbk_open_from_calendar_in_mobile_fix', 99);
}

if ( ! function_exists( 'yith_wcmv_change_commission_per_page' ) ) {
    function yith_wcmv_change_commission_per_page( $per_page ) {
       $per_page = 100;

       return $per_page;
    }

    add_filter( 'yith_wcmv_commissions_list_table_per_page', 'yith_wcmv_change_commission_per_page' );
}

if( ! function_exists( 'yith_wcbk_customization_online_payment' ) ){
    add_action( 'init', 'yith_wcbk_customization_online_payment', 99 );

    function yith_wcbk_customization_online_payment(){
        
        if ( function_exists( 'yith_wcbk' ) && function_exists( 'YITH_Vendors' ) ) {
            remove_action( 'woocommerce_checkout_order_processed', array( yith_wcbk()->orders, 'check_order_for_booking' ), 999, 2 );
            remove_action( 'woocommerce_store_api_checkout_order_processed', array( yith_wcbk()->orders, 'check_order_for_booking' ), 999 );
            remove_action( 'woocommerce_store_api_checkout_order_processed', array( YITH_Vendors()->orders, 'check_suborder' ), 10,1 );
            remove_action( 'woocommerce_checkout_update_order_meta', array( YITH_Vendors()->orders, 'check_suborder' ), 20, 2 );
    
            add_action( 'woocommerce_order_status_completed', array( yith_wcbk()->orders, 'check_order_for_booking' ), 8, 2 );
            add_action( 'woocommerce_order_status_completed', array( YITH_Vendors()->orders, 'check_suborder' ), 10,1 );
        }
    }
}


if ( ! function_exists( 'yith_wcbk_custom_fix_for_order_id_in_csv' ) && class_exists( 'YITH_Vendors_Orders' ) ) {
    function yith_wcbk_custom_fix_for_order_id_in_csv( $value, $booking ) {
        if ( ! empty( $booking ) && $booking instanceof YITH_WCBK_Booking ) {
            $order = $booking->get_order();
            if ( $order ) {
                if ( empty( $order->get_parent_id() ) ) {
                    $suborders = YITH_Vendors_Orders::get_suborders( $order->get_id() );
                    if ( ! empty( $suborders ) && count( $suborders ) === 1 ) {
                        $value = $suborders[0];
                    }
                }
            }
        }
        return $value;
    }
    add_filter( 'yith_wcbk_csv_field_order_id', 'yith_wcbk_custom_fix_for_order_id_in_csv', 99, 2 );
}

// =========================
// FUNCIONES PERSONALIZADAS MOVIDAS DE funciones.php
// =========================

function generateDays($rules,$max_places,$booking_ids,$parameters,$days)
{
    $dates = [];
    $response_dates = [];
    $booking_dates = [];

    foreach ($rules as $key => $value) {

        $date_ranges = $value['date_ranges'];
        $availabilities = $value['availabilities'];

        foreach ($date_ranges as $key => $dt) {
            
            $start = $dt['from'];

            while ($start <= $dt['to']) {

                $status = 0;

                if ($availabilities[0]['day'] == 'all') {
                    $status = 1;
                }else{
                    foreach ($availabilities as $key => $av) {

                        $day_of_week = date("w",strtotime($start));
                        
                        if ($av['day'] == $day_of_week) {
                            $status = 1;
                        }

                    }
                }

                $dates[$start] = ['status'=>$status,'max_places'=> $status == 0 ? 0 : $max_places];

                $start = date("Y-m-d",strtotime($start."+ 1 days"));
            }
        }
    }

    foreach ($booking_ids as $key => $value) {

        $start = substr($value->from, 0, 10);
        $to = substr($value->to, 0, 10);
        while ($start < $to) {

            $booking_dates[$start] += $value->persons;
            $start = date("Y-m-d",strtotime($start."+ 1 days"));

        }
    }

    $fecha = isset($parameters['fecha_solicitada']) ? $parameters['fecha_solicitada'] : date('Y-m-d');
    $fecha_90 = date("Y-m-d",strtotime($fecha."+ ".$days." days"));

    while ($fecha < $fecha_90) {

        if (isset($dates[$fecha])) {

            $data = ['date' => $fecha, 'status' => $dates[$fecha]['status'], 'places' => $dates[$fecha]['max_places'], 'totalplaces' => $dates[$fecha]['max_places']];

            if (isset($booking_dates[$fecha])) {

                $data['places'] = strval($dates[$fecha]['max_places']-$booking_dates[$fecha]);
                $data['totalplaces'] = $dates[$fecha]['max_places'];
            }
        }else{
            $data = ['date' => $fecha, 'status' => 0, 'places' => 0, 'totalplaces' => 0];
        }

        $response_dates[] = $data;

        $fecha = date("Y-m-d",strtotime($fecha."+ 1 days"));
    }
    return $response_dates;
}

function get_refuges($request) {
    global $wpdb;
    $parameters = [];
    $booking_id = 9281;

    $order_table = $wpdb->prefix . 'posts';
    $user_table = $wpdb->prefix . 'users';

    if (isset($_GET['id'])) {
        $product_id = isset($_GET['id']) ? $_GET['id'] : null;
        $product = wc_get_product($product_id);

        $booking_data = get_post_meta($product_id, '_booking_data', true);
        $rules = get_post_meta($product_id, '_yith_booking_availability_range', true);
        $max_places = get_post_meta($product_id, '_yith_booking_max_per_block', true);

        $query = "SELECT * FROM {$wpdb->prefix}yith_wcbk_booking_meta_lookup WHERE product_id = $product_id AND status != 'bk-cancelled'";
        $booking_ids = $wpdb->get_results($query);

        if ($product) {
            $parameters['fecha_solicitada'] = isset($_GET['fecha_solicitada']) ? $_GET['fecha_solicitada']  : date('Y-m-d');
            $response_dates = generateDays($rules, $max_places, $booking_ids, $parameters, 90);
            return [$product_id => ["RefName" => $product->name, "Days" => $response_dates]];
        } else {
            return new WP_Error('product_not_found', 'Producto no encontrado', array('status' => 404));
        }
    } else {
        return new WP_Error('missing_parameters', 'Parámetros faltantes', array('status' => 400));
    }
}

function make_prebooking($request) {
    global $wpdb;
    $parameters = $request->get_json_params();
    $table_name = $wpdb->prefix . 'yith_wcbk_booking_meta_lookup';
    $url = get_bloginfo('url');

    if (!$parameters) {
        return ["response"=>["result"=>["error"=>400],"response"=>false]];
    }

    if (isset($parameters['refugeID'])) {
        $data = array(
            array(
                'id' => 0,
                'title' => 'Nº de Persones',
                'number' => strval($parameters['places'])
            )
        );
        $serialized_data = $data;
        $from = $parameters['dateFrom'];
        $to = date('Y-m-d',strtotime($from.'+ '.$parameters['days'].' days'));
        $product_id = $parameters['refugeID'];
        $product = wc_get_product($product_id);
        $date = date("Y-m-d H:i:s");
        $query = "SELECT * FROM {$wpdb->prefix}yith_wcbk_booking_meta_lookup WHERE product_id = $product_id AND status != 'bk-cancelled'";
        $rules = get_post_meta($product_id, '_yith_booking_availability_range', true);
        $max_places = get_post_meta($product_id, '_yith_booking_max_per_block', true);
        $booking_ids = $wpdb->get_results($query);
        $parameters['fecha_solicitada'] = $from;
        $days = generateDays($rules, $max_places, $booking_ids, $parameters, $parameters['days']);
        $bookable = 0;
        foreach ($days as $key => $value) {
            if ($value['places'] - $parameters['days'] < 0) {
                $bookable++;
            }
        }
        if ($bookable>0) {
            return ["response"=>["response"=>false]];
        }else{
            $data = [
                "post_author" => 1,
                "post_date" => $date,
                "post_date_gmt" => $date,
                "post_title" => $product->name,
                "post_status" => "bk-unpaid",
                "comment_status" => "closed",
                "ping_status" => "closed",
                "post_name" => sanitize_title($product->name),
                "post_modified" => $date,
                "post_modified_gmt" => $date,
                "post_parent" => 0,
                "menu_order" => 0,
                "post_type" => "yith_booking",
                "comment_count" => 0,
            ];
            $post_id = wp_insert_post($data);
            $updated_post = array(
                'ID'     => $post_id,
                'guid'   => $url.'?post_type=yith_booking&p='.$post_id
            );
            wp_update_post($updated_post);
            $data = array(
                'booking_id' => $post_id,
                'product_id' => $product_id,
                'user_id' => 0,
                'status' => 'bk-unpaid',
                'from' => $from, 
                'to' => $to,
                'persons' => $parameters['places']
            );
            $format = array('%d', '%d', '%d', '%s', '%s', '%s', '%d');
            $wpdb->insert($table_name, $data, $format);
            update_post_meta($post_id, '_product_id', $parameters['refugeID']);
            update_post_meta($post_id, '_title', $product->name);
            update_post_meta($post_id, '_from', strtotime($from));
            update_post_meta($post_id, '_to', strtotime($to));
            update_post_meta($post_id, '_duration', $parameters['days']);
            update_post_meta($post_id, '_duration_unit', "day");
            update_post_meta($post_id, '_order_id', "0");
            update_post_meta($post_id, '_order_item_id', "0");
            update_post_meta($post_id, '_user_id', 0);
            update_post_meta($post_id, '_can_be_cancelled', "no");
            update_post_meta($post_id, '_cancelled_duration', "7");
            update_post_meta($post_id, '_cancelled_unit', "day");
            update_post_meta($post_id, '_location',  "");
            update_post_meta($post_id, '_all_day', "no");
            update_post_meta($post_id, '_persons', $parameters['places']);
            update_post_meta($post_id, '_person_types', $serialized_data);
            update_post_meta($post_id, '_has_persons', "yes");
            update_post_meta($post_id, '_service_quantities', "a:0:{}");
            update_post_meta($post_id, '_xsalto_booking_id', $parameters['bookingID']);
            return ["response"=>["response"=>true]];
        }
    }
}

function make_customer($request) {
    global $wpdb;
    $params = $request->get_json_params();
    if (!$params) {
        return ["response"=>["result"=>["error"=>400],"response"=>false]];
    }
    $results = $wpdb->get_results("SELECT post_id FROM {$wpdb->prefix}postmeta WHERE meta_key = '_xsalto_booking_id' AND meta_value = '".$params['bookingID']."'");
    $post_id = $results[0]->post_id;
    if (!$post_id) {
        return ["response"=>["response"=>false]];
    }
    $first_name = isset($params['customer']['firstName']) ? $params['customer']['firstName'] : '';
    $full_name = isset($params['customer']['name']) ? $params['customer']['name'] : '';
    $last_name = '';
    if ($first_name && $full_name) {
        $last_name = trim(preg_replace('/^'.preg_quote($first_name, '/').'/i', '', $full_name));
    }
    if (email_exists($params['customer']['email'])) {
        $user = get_user_by('email', $params['customer']['email']);
        $user_id = $user->ID;
        // Actualizar el display_name si es diferente
        if ($user->display_name !== $full_name) {
            wp_update_user(array(
                'ID' => $user_id,
                'display_name' => $full_name,
                "user_login" => str_replace('-', '.', sanitize_title($full_name)),
                "user_nicename" => sanitize_title($full_name),
            ));
        }
    }else{
        $userdata = [
            "user_login" => str_replace('-', '.', sanitize_title($full_name)),
            "user_pass" => "password",
            "user_nicename" => sanitize_title($full_name),
            "user_email" => $params['customer']['email'],
            "user_registered" => date("Y-m-d H:i:s"),
            "user_status" => 0,
            "display_name" => $full_name,
        ];
        $user_id = wp_insert_user($userdata);
    }
    
    // Guardar todos los datos del cliente como metadatos del usuario
    if ($first_name) {
        update_user_meta($user_id, 'first_name', $first_name);
        update_user_meta($user_id, 'billing_first_name', $first_name);
    }
    if ($last_name) {
        update_user_meta($user_id, 'last_name', $last_name);
        update_user_meta($user_id, 'billing_last_name', $last_name);
    }
    
    // Guardar dirección y datos adicionales
    if (!empty($params['customer']['address'])) {
        update_user_meta($user_id, 'billing_address_1', $params['customer']['address']);
    }
    if (!empty($params['customer']['city'])) {
        update_user_meta($user_id, 'billing_city', $params['customer']['city']);
    }
    if (!empty($params['customer']['postalCode'])) {
        update_user_meta($user_id, 'billing_postcode', $params['customer']['postalCode']);
    }
    if (!empty($params['customer']['country'])) {
        update_user_meta($user_id, 'billing_country', $params['customer']['country']);
    }
    if (!empty($params['customer']['phone'])) {
        update_user_meta($user_id, 'billing_phone', $params['customer']['phone']);
    }
    if (!empty($params['customer']['email'])) {
        update_user_meta($user_id, 'billing_email', $params['customer']['email']);
    }
    
    // Guardar datos adicionales como customerID y userLang
    if (!empty($params['customer']['customerID'])) {
        update_user_meta($user_id, 'customer_id', $params['customer']['customerID']);
    }
    if (!empty($params['customer']['userLang'])) {
        update_user_meta($user_id, 'user_language', $params['customer']['userLang']);
    }
    
    // Guardar todos los datos como metadatos de la reserva también
    if ($first_name) {
        update_post_meta($post_id, '_billing_first_name', $first_name);
    }
    if ($last_name) {
        update_post_meta($post_id, '_billing_last_name', $last_name);
    }
    if (!empty($params['customer']['address'])) {
        update_post_meta($post_id, '_billing_address_1', $params['customer']['address']);
    }
    if (!empty($params['customer']['city'])) {
        update_post_meta($post_id, '_billing_city', $params['customer']['city']);
    }
    if (!empty($params['customer']['postalCode'])) {
        update_post_meta($post_id, '_billing_postcode', $params['customer']['postalCode']);
    }
    if (!empty($params['customer']['country'])) {
        update_post_meta($post_id, '_billing_country', $params['customer']['country']);
    }
    if (!empty($params['customer']['phone'])) {
        update_post_meta($post_id, '_billing_phone', $params['customer']['phone']);
    }
    if (!empty($params['customer']['email'])) {
        update_post_meta($post_id, '_billing_email', $params['customer']['email']);
    }
    update_post_meta($post_id, '_user_id', $user_id);
    $result = $wpdb->get_results("UPDATE {$wpdb->prefix}yith_wcbk_booking_meta_lookup SET user_id = $user_id WHERE booking_id = $post_id");
    return ["response"=>["response"=>true]];
}

function make_payment($request){
    global $wpdb;
    $params = $request->get_json_params();
    $url = get_bloginfo('url');

    if (!$params) {
        return ["response"=>["result"=>["error"=>400],"response"=>false]];
    }

    $post = $wpdb->get_results("SELECT post_id FROM {$wpdb->prefix}postmeta WHERE meta_key = '_xsalto_booking_id' AND meta_value = '".$params['bookingID']."'");
    $post_id = $post[0]->post_id;
    $user = $wpdb->get_results("SELECT * FROM {$wpdb->prefix}yith_wcbk_booking_meta_lookup WHERE booking_id = $post_id");
    $user_id = $user[0]->user_id;
    $user_info = get_user_by('ID', $user_id);

    if (!$post_id) {
        return ["response"=>["response"=>true]];
    }
    
    // Obtener el product_id (refugeID) desde la reserva
    $product_id = get_post_meta($post_id, '_product_id', true);
    if (!$product_id) {
        // Si no está en postmeta, intentar obtenerlo desde la tabla de reservas
        $product_id = $user[0]->product_id ?? 0;
    }
    
    $updated_post_principal = array(
       'ID'     => $post_id,
       'post_status'   => 'bk-paid'
    );
    wp_update_post($updated_post_principal);
    $date = date("Y-m-d H:i:s");
    $timestamp = strtotime($date);
    
    // Obtener los datos del cliente desde los metadatos del usuario
    $billing_first_name = get_user_meta($user_id, 'billing_first_name', true);
    $billing_last_name = get_user_meta($user_id, 'billing_last_name', true);
    $billing_email = get_user_meta($user_id, 'billing_email', true);
    $billing_phone = get_user_meta($user_id, 'billing_phone', true);
    $billing_address_1 = get_user_meta($user_id, 'billing_address_1', true);
    $billing_city = get_user_meta($user_id, 'billing_city', true);
    $billing_postcode = get_user_meta($user_id, 'billing_postcode', true);
    $billing_country = get_user_meta($user_id, 'billing_country', true);
    
    // Si no hay datos en los metadatos del usuario, usar los de la reserva
    if (!$billing_first_name) {
        $billing_first_name = get_post_meta($post_id, '_billing_first_name', true);
    }
    if (!$billing_last_name) {
        $billing_last_name = get_post_meta($post_id, '_billing_last_name', true);
    }
    if (!$billing_email) {
        $billing_email = get_post_meta($post_id, '_billing_email', true);
    }
    if (!$billing_phone) {
        $billing_phone = get_post_meta($post_id, '_billing_phone', true);
    }
    if (!$billing_address_1) {
        $billing_address_1 = get_post_meta($post_id, '_billing_address_1', true);
    }
    if (!$billing_city) {
        $billing_city = get_post_meta($post_id, '_billing_city', true);
    }
    if (!$billing_postcode) {
        $billing_postcode = get_post_meta($post_id, '_billing_postcode', true);
    }
    if (!$billing_country) {
        $billing_country = get_post_meta($post_id, '_billing_country', true);
    }
    
    // Fallback a datos del usuario si no hay nada
    if (!$billing_first_name) {
        $billing_first_name = $user_info->first_name ?: '';
    }
    if (!$billing_last_name) {
        $billing_last_name = $user_info->last_name ?: '';
    }
    if (!$billing_email) {
        $billing_email = $user_info->user_email;
    }
    
    $product = wc_get_product($product_id);
    $user_display = get_user_by('display_name', $product ? $product->name : '');
    $user_display_id = $user_display ? $user_display->ID : 0;
    $data = [
       "post_author" => 1,
       "post_date" => $date,
       "post_date_gmt" => $date,
       "post_title" => 'Order &ndash; ' . date('F j, Y @ h:i A', $timestamp),
       "post_status" => "wc-completed",
       "comment_status" => "closed",
       "ping_status" => "closed",
       "post_name" => sanitize_title('Order &ndash; ' . date('F j, Y @ h:i A', $timestamp)),
       "post_modified" => $date,
       "post_modified_gmt" => $date,
       "post_parent" => 0,
       "menu_order" => 0,
       "post_type" => "shop_order",
       "comment_count" => 0,
    ];
    $post_id_shop_1 = wp_insert_post($data);
    
    // Crear la orden hija con título que incluya el producto
    $data_hija = $data;
    $product_name = $product ? $product->get_name() : 'Refugi';
    $data_hija["post_title"] = 'Order &ndash; ' . date('F j, Y @ h:i A', $timestamp) . ' ( en ' . $product_name . ' )';
    $data_hija["post_name"] = sanitize_title('Order &ndash; ' . date('F j, Y @ h:i A', $timestamp) . ' en ' . $product_name);
    $post_id_shop_2 = wp_insert_post($data_hija);
    $updated_post_shop_1 = array(
       'ID'     => $post_id_shop_1,
       'guid'   => $url.'?post_type=yith_booking&p='.$post_id_shop_1,
       'post_title' => 'Order &ndash; ' . date('F j, Y @ h:i A', $timestamp) . ' ( en ' . $product_name . ' )',
       'post_name' => sanitize_title('Order &ndash; ' . date('F j, Y @ h:i A', $timestamp) . ' en ' . $product_name),
    );
    wp_update_post($updated_post_shop_1); 
    $updated_post_shop_2 = array(
       'ID'     => $post_id_shop_2,
       'guid'   => $url.'?post_type=yith_booking&p='.$post_id_shop_2,
       'post_parent' => $post_id_shop_1
    );
    wp_update_post($updated_post_shop_2); 
    $wpdb->show_errors();
    $wpdb->insert('wpol_woocommerce_order_items', array(
        'order_item_name' => $product ? $product->name : 'Refugi',
        'order_item_type' => 'line_item',
        'order_id'        => $post_id_shop_2,
    ), array('%s', '%s', '%d'));
    $new_order_id = $wpdb->insert_id;
    
    // Crear el item de impuestos
    $wpdb->insert('wpol_woocommerce_order_items', array(
        'order_item_name' => 'ES-10% IVA-1',
        'order_item_type' => 'tax',
        'order_id'        => $post_id_shop_2,
    ), array('%s', '%s', '%d'));
    $tax_order_item_id = $wpdb->insert_id;
    
    // Crear items en la orden padre (shop_1)
    $wpdb->insert('wpol_woocommerce_order_items', array(
        'order_item_name' => $product ? $product->name : 'Refugi',
        'order_item_type' => 'line_item',
        'order_id'        => $post_id_shop_1,
    ), array('%s', '%s', '%d'));
    $parent_order_item_id = $wpdb->insert_id;
    
    // Crear el item de impuestos en la orden padre
    $wpdb->insert('wpol_woocommerce_order_items', array(
        'order_item_name' => 'ES-10% IVA-1',
        'order_item_type' => 'tax',
        'order_id'        => $post_id_shop_1,
    ), array('%s', '%s', '%d'));
    $parent_tax_order_item_id = $wpdb->insert_id;
    $wpdb->insert(
       'wpol_wc_order_stats',
       array(
           'order_id'=> $post_id_shop_2,
           'parent_id' => 0,
           'date_created' => $date,
           'date_created_gmt' => $date,
           'num_items_sold' => 1,
           'total_sales'=> $params['payment']['duplication']['currentAmount'] ?? 0,
           'status'=>'wc-completed',
           'customer_id'=> $user_id,
           'returning_customer'=> 0
       )
    ); 
    $wpdb->hide_errors();
    $wpdb->get_results("UPDATE {$wpdb->prefix}yith_wcbk_booking_meta_lookup SET order_id = $post_id_shop_2  WHERE booking_id = $post_id"); 
    $wpdb->get_results("UPDATE {$wpdb->prefix}yith_wcbk_booking_meta_lookup SET status = 'bk-paid' WHERE booking_id = $post_id"); 
    $wpdb->get_results("UPDATE {$wpdb->prefix}postmeta SET meta_value = $post_id_shop_2 WHERE post_id = $post_id AND meta_key = '_order_id' "); 
    $wpdb->get_results("UPDATE {$wpdb->prefix}postmeta SET meta_value = $new_order_id  WHERE post_id = $post_id AND meta_key = '_order_item_id' "); 
    
    // Obtener las fechas de la reserva
    $from = get_post_meta($post_id, '_from', true);
    $to = get_post_meta($post_id, '_to', true);
    $duration = get_post_meta($post_id, '_duration', true);
    $persons = get_post_meta($post_id, '_persons', true);
    
    // Convertir timestamps a fechas si es necesario
    if (is_numeric($from)) {
        $from = date('Y-m-d', $from);
    }
    if (is_numeric($to)) {
        $to = date('Y-m-d', $to);
    }
    
    // Agregar todos los metadatos del item de orden según la estructura de la base de datos
    wc_add_order_item_meta($new_order_id, '_product_id', $product ? $product->get_id() : 0);
    wc_add_order_item_meta($new_order_id, '_variation_id', 0);
    wc_add_order_item_meta($new_order_id, '_qty', 1);
    wc_add_order_item_meta($new_order_id, '_tax_class', '');
    
    // Calcular subtotales y totales
    $amount = $params['payment']['duplication']['currentAmount'] ?? 0;
    $tax_rate = 0.10; // 10% IVA
    $subtotal = $amount / (1 + $tax_rate);
    $tax_amount = $amount - $subtotal;
    
    wc_add_order_item_meta($new_order_id, '_line_subtotal', number_format($subtotal, 6));
    wc_add_order_item_meta($new_order_id, '_line_subtotal_tax', number_format($tax_amount, 2));
    wc_add_order_item_meta($new_order_id, '_line_total', number_format($subtotal, 6));
    wc_add_order_item_meta($new_order_id, '_line_tax', number_format($tax_amount, 2));
    
    // Datos de impuestos serializados
    $tax_data = array(
        'total' => array(1 => number_format($tax_amount, 6)),
        'subtotal' => array(1 => number_format($tax_amount, 6))
    );
    wc_add_order_item_meta($new_order_id, '_line_tax_data', $tax_data);
    
    // Datos de reserva serializados
    $booking_data = array(
        'from' => strtotime($from),
        'to' => strtotime($to),
        'duration' => $duration ?: 1,
        'persons' => $persons ?: 1,
        'person_types' => array(30748 => strval($persons ?: 1)),
        'booking_services' => array(),
        'booking_service_quantities' => array(),
        'resource_ids' => array(),
        '_added-to-cart-timestamp' => time()
    );
    wc_add_order_item_meta($new_order_id, 'yith_booking_data', $booking_data);
    
    // Datos de depósito
    wc_add_order_item_meta($new_order_id, '_deposit', 1);
    wc_add_order_item_meta($new_order_id, '_deposit_type', 'rate');
    wc_add_order_item_meta($new_order_id, '_deposit_amount', $amount);
    wc_add_order_item_meta($new_order_id, '_deposit_rate', 100);
    wc_add_order_item_meta($new_order_id, '_deposit_value', $amount);
    wc_add_order_item_meta($new_order_id, '_deposit_balance', 0);
    wc_add_order_item_meta($new_order_id, '_deposit_balance_shipping', '');
    
    // Datos del producto para YWPI
    wc_add_order_item_meta($new_order_id, '_ywpi_product_regular_price', '');
    wc_add_order_item_meta($new_order_id, '_ywpi_product_sku', $product ? $product->get_sku() : '');
    wc_add_order_item_meta($new_order_id, '_ywpi_product_short_description', $product ? $product->get_short_description() : '');
    
    // ID de la reserva
    wc_add_order_item_meta($new_order_id, '_booking_id', $post_id);
    wc_add_order_item_meta($new_order_id, '_reduced_stock', '1');
    
    // Datos de comisión (si aplica)
    wc_add_order_item_meta($new_order_id, '_commission_id', '');
    wc_add_order_item_meta($new_order_id, '_commission_included_tax', 'vendor');
    wc_add_order_item_meta($new_order_id, '_commission_included_coupon', 'yes');
    
    // Agregar metadatos del item de impuestos
    wc_add_order_item_meta($tax_order_item_id, 'rate_id', '1');
    wc_add_order_item_meta($tax_order_item_id, 'label', '10% IVA');
    wc_add_order_item_meta($tax_order_item_id, 'compound', '');
    wc_add_order_item_meta($tax_order_item_id, 'tax_amount', number_format($tax_amount, 2));
    wc_add_order_item_meta($tax_order_item_id, 'shipping_tax_amount', '0');
    wc_add_order_item_meta($tax_order_item_id, 'rate_percent', '10');
    
    // Agregar metadatos del item principal en la orden padre
    wc_add_order_item_meta($parent_order_item_id, '_product_id', $product ? $product->get_id() : 0);
    wc_add_order_item_meta($parent_order_item_id, '_variation_id', 0);
    wc_add_order_item_meta($parent_order_item_id, '_qty', 1);
    wc_add_order_item_meta($parent_order_item_id, '_tax_class', '');
    wc_add_order_item_meta($parent_order_item_id, '_line_subtotal', number_format($subtotal, 6));
    wc_add_order_item_meta($parent_order_item_id, '_line_subtotal_tax', number_format($tax_amount, 2));
    wc_add_order_item_meta($parent_order_item_id, '_line_total', number_format($subtotal, 6));
    wc_add_order_item_meta($parent_order_item_id, '_line_tax', number_format($tax_amount, 2));
    wc_add_order_item_meta($parent_order_item_id, '_line_tax_data', $tax_data);
    wc_add_order_item_meta($parent_order_item_id, '_parent_line_item_id', $new_order_id); // Referencia al item de la orden hija
    wc_add_order_item_meta($parent_order_item_id, 'yith_booking_data', $booking_data);
    wc_add_order_item_meta($parent_order_item_id, '_deposit', 1);
    wc_add_order_item_meta($parent_order_item_id, '_deposit_type', 'rate');
    wc_add_order_item_meta($parent_order_item_id, '_deposit_amount', $amount);
    wc_add_order_item_meta($parent_order_item_id, '_deposit_rate', 100);
    wc_add_order_item_meta($parent_order_item_id, '_deposit_value', $amount);
    wc_add_order_item_meta($parent_order_item_id, '_deposit_balance', 0);
    wc_add_order_item_meta($parent_order_item_id, '_deposit_balance_shipping', '');
    wc_add_order_item_meta($parent_order_item_id, '_ywpi_product_regular_price', '');
    wc_add_order_item_meta($parent_order_item_id, '_ywpi_product_sku', $product ? $product->get_sku() : '');
    wc_add_order_item_meta($parent_order_item_id, '_ywpi_product_short_description', $product ? $product->get_short_description() : '');
    wc_add_order_item_meta($parent_order_item_id, '_booking_id', $post_id);
    wc_add_order_item_meta($parent_order_item_id, '_reduced_stock', '1');
    wc_add_order_item_meta($parent_order_item_id, '_commission_id', '');
    wc_add_order_item_meta($parent_order_item_id, '_commission_included_tax', 'vendor');
    
    // Agregar metadatos del item de impuestos en la orden padre
    wc_add_order_item_meta($parent_tax_order_item_id, 'rate_id', '1');
    wc_add_order_item_meta($parent_tax_order_item_id, 'label', '10% IVA');
    wc_add_order_item_meta($parent_tax_order_item_id, 'compound', '');
    wc_add_order_item_meta($parent_tax_order_item_id, 'tax_amount', number_format($tax_amount, 2));
    wc_add_order_item_meta($parent_tax_order_item_id, 'shipping_tax_amount', '0');
    wc_add_order_item_meta($parent_tax_order_item_id, 'rate_percent', '10');
    
    update_post_meta($post_id_shop_2, '_order_key', 'wc_order_'.uniqid());
    update_post_meta($post_id_shop_2, '_customer_user', $user_id);
    update_post_meta($post_id_shop_2, '_payment_method', 'xsalto');
    update_post_meta($post_id_shop_2, '_payment_method_title', 'xSalto');
    update_post_meta($post_id_shop_2, '_customer_ip_address', 0);
    update_post_meta($post_id_shop_2, '_customer_user_agent', 'Mozilla/5.0');
    update_post_meta($post_id_shop_2, '_created_via', "yith_wcmv_vendor_suborder");
    update_post_meta($post_id_shop_2, '_download_permissions_granted', "yes");
    update_post_meta($post_id_shop_2, '_recorded_sales', 'yes');
    update_post_meta($post_id_shop_2, '_recorded_coupon_usage_counts', "no");
    update_post_meta($post_id_shop_2, '_new_order_email_sent', "no");
    update_post_meta($post_id_shop_2, '_order_stock_reduced', "yes");
    update_post_meta($post_id_shop_2, '_billing_first_name', $billing_first_name);
    update_post_meta($post_id_shop_2, '_billing_last_name', $billing_last_name);
    update_post_meta($post_id_shop_2, '_billing_address_1', $billing_address_1 ?: '');
    update_post_meta($post_id_shop_2, '_billing_city', $billing_city ?: '');
    update_post_meta($post_id_shop_2, '_billing_state', "");
    update_post_meta($post_id_shop_2, '_billing_postcode', $billing_postcode ?: '');
    update_post_meta($post_id_shop_2, '_billing_country', $billing_country ?: 'ES'); 
    update_post_meta($post_id_shop_2, '_billing_email', $billing_email);
    update_post_meta($post_id_shop_2, '_billing_phone', $billing_phone ?: ''); 
    
    // Actualizar metadatos de la orden padre (necesario para el calendario)
    update_post_meta($post_id_shop_1, '_billing_first_name', $billing_first_name);
    update_post_meta($post_id_shop_1, '_billing_last_name', $billing_last_name);
    update_post_meta($post_id_shop_1, '_billing_address_1', $billing_address_1 ?: '');
    update_post_meta($post_id_shop_1, '_billing_city', $billing_city ?: '');
    update_post_meta($post_id_shop_1, '_billing_state', "");
    update_post_meta($post_id_shop_1, '_billing_postcode', $billing_postcode ?: '');
    update_post_meta($post_id_shop_1, '_billing_country', $billing_country ?: 'ES');
    update_post_meta($post_id_shop_1, '_billing_email', $billing_email);
    update_post_meta($post_id_shop_1, '_billing_phone', $billing_phone ?: '');
    
    // Actualizar metadatos de la reserva principal para que aparezcan en el calendario
    update_post_meta($post_id, '_billing_first_name', $billing_first_name);
    update_post_meta($post_id, '_billing_last_name', $billing_last_name);
    update_post_meta($post_id, '_billing_email', $billing_email);
    update_post_meta($post_id, '_billing_phone', $billing_phone ?: '');
    
    update_post_meta($post_id_shop_2, '_order_currency', "EUR");
    update_post_meta($post_id_shop_2, '_cart_discount', 0); 
    update_post_meta($post_id_shop_2, '_cart_discount_tax', "0");
    update_post_meta($post_id_shop_2, '_order_shipping', 0); 
    update_post_meta($post_id_shop_2, '_order_shipping_tax', 0); 
    update_post_meta($post_id_shop_2, '_order_tax', number_format($tax_amount, 2)); 
    update_post_meta($post_id_shop_2, '_order_total', $params['payment']['duplication']['currentAmount'] ?? 0);
    update_post_meta($post_id_shop_2, '_prices_include_tax', "yes");
    update_post_meta($post_id_shop_2, '_billing_address_index', $billing_first_name . ' ' . $billing_last_name . ' ' . ($billing_address_1 ?: '') . ' ' . ($billing_city ?: '') . ' ' . ($billing_postcode ?: '') . ' ' . ($billing_country ?: 'ES') . ' ' . $billing_email . ' ' . ($billing_phone ?: ''));
    update_post_meta($post_id_shop_2, '_shipping_address_index', '');
    update_post_meta($post_id_shop_2, '_billing_Dni_·_Nie_·_Passaport', '');
    update_post_meta($post_id_shop_2, '_billing_Província', '');
    update_post_meta($post_id_shop_2, 'is_vat_exempt', "no");
    update_post_meta($post_id_shop_2, 'additional_Federació', "");
    update_post_meta($post_id_shop_2, 'additional_sortidatravessa', '');
    update_post_meta($post_id_shop_2, '_ywson_custom_number_order_complete', 'CODI-' . ($params['payment']['duplication']['bk_transaction_id'] ?? uniqid()));
    update_post_meta($post_id_shop_2, 'trp_language', 'ca');
    update_post_meta($post_id_shop_2, '_wc_order_attribution_source_type', 'referral');
    update_post_meta($post_id_shop_2, '_wc_order_attribution_device_type', 'Mobile');
    update_post_meta($post_id_shop_2, '_wc_order_attribution_referrer', 'xSalto Payment System');
    update_post_meta($post_id_shop_2, '_wc_order_attribution_utm_source', 'xSalto');
    update_post_meta($post_id_shop_2, '_wc_order_attribution_utm_medium', 'referral');
    update_post_meta($post_id_shop_2, '_wc_order_attribution_utm_content', 'payment');
    update_post_meta($post_id_shop_2, '_wc_order_attribution_session_entry', 'xSalto Payment Gateway');
    update_post_meta($post_id_shop_2, '_wc_order_attribution_session_start_time', $date);
    update_post_meta($post_id_shop_2, '_wc_order_attribution_session_pages', '1');
    update_post_meta($post_id_shop_2, '_wc_order_attribution_session_count', '1');
    update_post_meta($post_id_shop_2, '_wc_order_attribution_user_agent', 'xSalto Payment System');
    update_post_meta($post_id_shop_2, '_has_deposit', 1);
    update_post_meta($post_id_shop_2, 'yith_bookings', 'a:1:{i:0;i:'.$post_id.';}');
    update_post_meta($post_id_shop_2, '_ywson_subnumber_created', "yes");
    update_post_meta($post_id_shop_2, '_commissions_processed', 'yes');
    update_post_meta($post_id_shop_2, '_date_completed', strtotime($date));
    update_post_meta($post_id_shop_2, '_date_paid', strtotime($date));
    update_post_meta($post_id_shop_2, '_paid_date', $date);
    update_post_meta($post_id_shop_2, '_completed_date', $date); 
    update_post_meta($post_id_shop_2, '_order_version', "8.0.0"); 
    update_post_meta($post_id_shop_2, 'vendor_id', $user_display_id); 
    
    // Agregar metadatos para la orden padre también
    update_post_meta($post_id_shop_1, '_order_key', 'wc_order_'.uniqid());
    update_post_meta($post_id_shop_1, '_customer_user', $user_id);
    update_post_meta($post_id_shop_1, '_payment_method', 'xsalto');
    update_post_meta($post_id_shop_1, '_payment_method_title', 'xSalto');
    update_post_meta($post_id_shop_1, '_customer_ip_address', 0);
    update_post_meta($post_id_shop_1, '_customer_user_agent', 'Mozilla/5.0');
    update_post_meta($post_id_shop_1, '_created_via', "yith_wcmv_vendor_suborder");
    update_post_meta($post_id_shop_1, '_download_permissions_granted', "yes");
    update_post_meta($post_id_shop_1, '_recorded_sales', 'yes');
    update_post_meta($post_id_shop_1, '_recorded_coupon_usage_counts', "no");
    update_post_meta($post_id_shop_1, '_new_order_email_sent', "no");
    update_post_meta($post_id_shop_1, '_order_stock_reduced', "yes");
    update_post_meta($post_id_shop_1, '_order_currency', "EUR");
    update_post_meta($post_id_shop_1, '_cart_discount', 0); 
    update_post_meta($post_id_shop_1, '_cart_discount_tax', "0");
    update_post_meta($post_id_shop_1, '_order_shipping', 0); 
    update_post_meta($post_id_shop_1, '_order_shipping_tax', 0); 
    update_post_meta($post_id_shop_1, '_order_tax', number_format($tax_amount, 2)); 
    update_post_meta($post_id_shop_1, '_order_total', $params['payment']['duplication']['currentAmount'] ?? 0);
    update_post_meta($post_id_shop_1, '_order_version', "8.0.0"); 
    update_post_meta($post_id_shop_1, '_prices_include_tax', "yes");
    update_post_meta($post_id_shop_1, '_billing_address_index', $billing_first_name . ' ' . $billing_last_name . ' ' . ($billing_address_1 ?: '') . ' ' . ($billing_city ?: '') . ' ' . ($billing_postcode ?: '') . ' ' . ($billing_country ?: 'ES') . ' ' . $billing_email . ' ' . ($billing_phone ?: ''));
    update_post_meta($post_id_shop_1, '_shipping_address_index', '');
    update_post_meta($post_id_shop_1, '_billing_Dni_·_Nie_·_Passaport', '');
    update_post_meta($post_id_shop_1, '_billing_Província', '');
    update_post_meta($post_id_shop_1, 'is_vat_exempt', "no");
    update_post_meta($post_id_shop_1, 'additional_Federació', "");
    update_post_meta($post_id_shop_1, 'additional_sortidatravessa', '');
    update_post_meta($post_id_shop_1, '_ywson_custom_number_order_complete', 'CODI-' . ($params['payment']['duplication']['bk_transaction_id'] ?? uniqid()));
    update_post_meta($post_id_shop_1, 'trp_language', 'ca');
    update_post_meta($post_id_shop_1, '_wc_order_attribution_source_type', 'referral');
    update_post_meta($post_id_shop_1, '_wc_order_attribution_device_type', 'Mobile');
    update_post_meta($post_id_shop_1, '_wc_order_attribution_referrer', 'xSalto Payment System');
    update_post_meta($post_id_shop_1, '_wc_order_attribution_utm_source', 'xSalto');
    update_post_meta($post_id_shop_1, '_wc_order_attribution_utm_medium', 'referral');
    update_post_meta($post_id_shop_1, '_wc_order_attribution_utm_content', 'payment');
    update_post_meta($post_id_shop_1, '_wc_order_attribution_session_entry', 'xSalto Payment Gateway');
    update_post_meta($post_id_shop_1, '_wc_order_attribution_session_start_time', $date);
    update_post_meta($post_id_shop_1, '_wc_order_attribution_session_pages', '1');
    update_post_meta($post_id_shop_1, '_wc_order_attribution_session_count', '1');
    update_post_meta($post_id_shop_1, '_wc_order_attribution_user_agent', 'xSalto Payment System');
    update_post_meta($post_id_shop_1, '_has_deposit', 1);
    update_post_meta($post_id_shop_1, 'yith_bookings', 'a:1:{i:0;i:'.$post_id.';}');
    update_post_meta($post_id_shop_1, '_ywson_subnumber_created', "yes");
    update_post_meta($post_id_shop_1, '_commissions_processed', 'yes');
    update_post_meta($post_id_shop_1, '_date_completed', strtotime($date));
    update_post_meta($post_id_shop_1, '_date_paid', strtotime($date));
    update_post_meta($post_id_shop_1, '_paid_date', $date);
    update_post_meta($post_id_shop_1, '_completed_date', $date);  
    return ["response"=>["response"=>true]];
}

function make_services($request)
{
    global $wpdb;
    $params = $request->get_json_params();
    $results = $wpdb->get_results("SELECT post_id FROM {$wpdb->prefix}postmeta WHERE meta_key = '_xsalto_booking_id' AND meta_value = '".$params['bookingID']."'");
    $post_id = $results[0]->post_id;
    if (array_keys($params['services']) === range(0, count($params['services']) - 1)) {
        $servicios = $params['services'];
    }else{
        $servicios = [$params['services']];
    }
    if ($post_id) {
        $terminos = [];
        foreach ($servicios as $key => $servicio) {
            if (array_keys($servicio['products']) === range(0, count($servicio['products']) - 1)) {
                $productos = $servicio['products'];
            }else{
                $productos = [$servicio['products']];
            }
            foreach ($productos as $key => $pr) {
                $termino = get_term_by('name', $pr['title'], 'yith_booking_service');
                if (!$termino) {
                    $nuevo_termino = wp_insert_term($pr['title'], 'yith_booking_service');
                    $id_termino = $nuevo_termino['term_id'];
                }else{
                    $id_termino = $termino->term_id;
                }
                update_term_meta($id_termino, "yith_shop_vendor", "243");
                update_term_meta($id_termino, "price", "0");
                update_term_meta($id_termino, "optional", "no");
                update_term_meta($id_termino, "hidden", "no");
                update_term_meta($id_termino, "hidden_in_search_forms", "no");
                update_term_meta($id_termino, "multiply_per_blocks", "no");
                update_term_meta($id_termino, "multiply_per_persons", "no");
                update_term_meta($id_termino, "price_for_person_types", 'a:1:{i:30748;s:0:"";}');
                update_term_meta($id_termino, "quantity_enabled", "no");
                update_term_meta($id_termino, "min_quantity", "0");
                update_term_meta($id_termino, "max_quantity", "0");
                $terminos[] = $id_termino;
            }
        }
        if (count($terminos)) {
            wp_set_post_terms($post_id, $terminos, 'yith_booking_service');
            return ["response"=>["response"=>true]];
        }else{
            return ["response"=>["result"=>[],"response"=>false]];
        }
    }
}

function update_booking($request)
{
    global $wpdb;
    $params = $request->get_json_params();
    // 1. Buscar el booking por bookingID
    $results = $wpdb->get_results($wpdb->prepare("SELECT post_id FROM {$wpdb->prefix}postmeta WHERE meta_key = %s AND meta_value = %s", '_xsalto_booking_id', $params['bookingID']));
    if (empty($results) || empty($results[0]->post_id)) {
        return new WP_Error('not_found', 'No se encontró la reserva con ese bookingID', array('status' => 404));
    }
    $post_id = $results[0]->post_id;
    // 2. Obtener qty del primer producto del primer día
    if (!isset($params['days'][0]['products'][0]['qty'])) {
        return new WP_Error('invalid_request', 'No se encontró qty en el primer producto', array('status' => 400));
    }
    $qty = intval($params['days'][0]['products'][0]['qty']);
    // 3. Actualizar persons en la tabla de reservas
    $wpdb->update(
        $wpdb->prefix . 'yith_wcbk_booking_meta_lookup',
        array('persons' => $qty),
        array('booking_id' => $post_id)
    );
    // 4. Actualizar metadato _persons en postmeta
    update_post_meta($post_id, '_persons', $qty);
    
    // 4.1. Actualizar metadato _person_types con datos serializados
    $data = array(
        array(
            'id' => 0,
            'title' => 'Nº de Persones',
            'number' => strval($qty)
        )
    );
    $serialized_data = $data;
    update_post_meta($post_id, '_person_types', $serialized_data);
    
    // 5. Actualizar los servicios asociados (igual que make_services)
    $servicios = [];
    foreach ($params['days'] as $day) {
        if (isset($day['products']) && is_array($day['products'])) {
            foreach ($day['products'] as $pr) {
                $servicios[] = $pr;
            }
        }
    }
    $terminos = [];
    foreach ($servicios as $servicio) {
        $titulo = $servicio['title'];
        $termino = get_term_by('name', $titulo, 'yith_booking_service');
        if (!$termino) {
            $nuevo_termino = wp_insert_term($titulo, 'yith_booking_service');
            $id_termino = $nuevo_termino['term_id'];
        } else {
            $id_termino = $termino->term_id;
        }
        // Puedes personalizar los metadatos del servicio aquí si lo necesitas
        update_term_meta($id_termino, "yith_shop_vendor", "243");
        update_term_meta($id_termino, "price", "0");
        update_term_meta($id_termino, "optional", "no");
        update_term_meta($id_termino, "hidden", "no");
        update_term_meta($id_termino, "hidden_in_search_forms", "no");
        update_term_meta($id_termino, "multiply_per_blocks", "no");
        update_term_meta($id_termino, "multiply_per_persons", "no");
        update_term_meta($id_termino, "price_for_person_types", 'a:1:{i:30748;s:0:"";}');
        update_term_meta($id_termino, "quantity_enabled", "no");
        update_term_meta($id_termino, "min_quantity", "0");
        update_term_meta($id_termino, "max_quantity", "0");
        $terminos[] = $id_termino;
    }
    if (count($terminos)) {
        wp_set_post_terms($post_id, $terminos, 'yith_booking_service');
        return ["response" => ["response" => true]];
    } else {
        return ["response" => ["result" => [], "response" => false]];
    }
}

// =========================
// ENDPOINTS REST PERSONALIZADOS SIMPLES
// =========================
add_action('rest_api_init', function () {
    // GET /wp-json/wp/v2/getAvailabilities
    register_rest_route('wp/v2', '/getAvailabilities', array(
        array(
            'methods'  => WP_REST_Server::READABLE,
            'callback' => 'get_refuges',
            'permission_callback' => '__return_true',
        )
    ));
    // POST /wp-json/wp/v2/preBooking
    register_rest_route('wp/v2', '/preBooking', array(
        array(
            'methods'  => WP_REST_Server::CREATABLE,
            'callback' => 'make_prebooking',
            'permission_callback' => '__return_true',
        )
    ));
    // POST /wp-json/wp/v2/setCustomer
    register_rest_route('wp/v2', '/setCustomer', array(
        array(
            'methods'  => WP_REST_Server::CREATABLE,
            'callback' => 'make_customer',
            'permission_callback' => '__return_true',
        )
    ));
    // POST /wp-json/wp/v2/setPayment
    register_rest_route('wp/v2', '/setPayment', array(
        array(
            'methods'  => WP_REST_Server::CREATABLE,
            'callback' => 'make_payment',
            'permission_callback' => '__return_true',
        )
    ));
    // POST /wp-json/wp/v2/setServices
    register_rest_route('wp/v2', '/setServices', array(
        array(
            'methods'  => WP_REST_Server::CREATABLE,
            'callback' => 'make_services',
            'permission_callback' => '__return_true',
        )
    ));
    // POST /wp-json/wp/v2/updateBooking
    register_rest_route('wp/v2', '/updateBooking', array(
        array(
            'methods'  => WP_REST_Server::CREATABLE,
            'callback' => 'update_booking',
            'permission_callback' => '__return_true',
        )
    ));
    // DELETE /wp-json/wp/v2/deleteBooking
    register_rest_route('wp/v2', '/deleteBooking', array(
        array(
            'methods'  => WP_REST_Server::DELETABLE,
            'callback' => 'delete_booking',
            'permission_callback' => '__return_true',
        )
    ));
});

function delete_booking($request) {
    global $wpdb;
    // Obtener el bookingID desde el body (JSON) o query param
    $params = $request->get_json_params();
    $xsalto_booking_id = $params['bookingID'] ?? $request->get_param('bookingID');
    if (!$xsalto_booking_id) {
        return new WP_Error('missing_booking_id', 'Falta el parámetro bookingID', array('status' => 400));
    }
    
    // Buscar el post_id de la reserva usando _xsalto_booking_id
    $results = $wpdb->get_results($wpdb->prepare("SELECT post_id FROM {$wpdb->prefix}postmeta WHERE meta_key = %s AND meta_value = %s", '_xsalto_booking_id', $xsalto_booking_id));
    if (empty($results) || empty($results[0]->post_id)) {
        return new WP_Error('not_found', 'No se encontró la reserva con ese bookingID', array('status' => 404));
    }
    $booking_id = $results[0]->post_id;

    // 1. Eliminar servicios asociados (términos y relaciones)
    wp_delete_object_term_relationships($booking_id, 'yith_booking_service');

    // 2. Buscar y eliminar órdenes relacionadas (shop_order)
    $order_id = get_post_meta($booking_id, '_order_id', true);
    if ($order_id) {
        // Buscar órdenes padre e hija
        $parent_order_id = $order_id;
        $child_order_id = $order_id;
        
        // Verificar si es una orden hija (tiene padre)
        $parent_check = $wpdb->get_var($wpdb->prepare("SELECT post_parent FROM {$wpdb->prefix}posts WHERE ID = %d", $order_id));
        if ($parent_check > 0) {
            // Es una orden hija, el padre es $parent_check
            $parent_order_id = $parent_check;
            $child_order_id = $order_id;
        } else {
            // Es una orden padre, buscar la hija
            $child_order_id = $wpdb->get_var($wpdb->prepare("SELECT ID FROM {$wpdb->prefix}posts WHERE post_parent = %d AND post_type = 'shop_order'", $order_id));
        }
        
        // Eliminar items de WooCommerce de ambas órdenes
        if ($parent_order_id) {
            $parent_items = $wpdb->get_col($wpdb->prepare("SELECT order_item_id FROM {$wpdb->prefix}woocommerce_order_items WHERE order_id = %d", $parent_order_id));
            foreach ($parent_items as $item_id) {
                // Eliminar metadatos del item
                $wpdb->delete($wpdb->prefix . 'woocommerce_order_itemmeta', array('order_item_id' => $item_id));
            }
            // Eliminar items
            $wpdb->delete($wpdb->prefix . 'woocommerce_order_items', array('order_id' => $parent_order_id));
            // Eliminar metadatos de la orden padre
            $wpdb->delete($wpdb->prefix . 'postmeta', array('post_id' => $parent_order_id));
            // Eliminar la orden padre
            wp_delete_post($parent_order_id, true);
        }
        
        if ($child_order_id && $child_order_id != $parent_order_id) {
            $child_items = $wpdb->get_col($wpdb->prepare("SELECT order_item_id FROM {$wpdb->prefix}woocommerce_order_items WHERE order_id = %d", $child_order_id));
            foreach ($child_items as $item_id) {
                // Eliminar metadatos del item
                $wpdb->delete($wpdb->prefix . 'woocommerce_order_itemmeta', array('order_item_id' => $item_id));
            }
            // Eliminar items
            $wpdb->delete($wpdb->prefix . 'woocommerce_order_items', array('order_id' => $child_order_id));
            // Eliminar metadatos de la orden hija
            $wpdb->delete($wpdb->prefix . 'postmeta', array('post_id' => $child_order_id));
            // Eliminar la orden hija
            wp_delete_post($child_order_id, true);
        }
        
        // Eliminar estadísticas de WooCommerce
        $wpdb->delete($wpdb->prefix . 'wc_order_stats', array('order_id' => $parent_order_id));
        if ($child_order_id != $parent_order_id) {
            $wpdb->delete($wpdb->prefix . 'wc_order_stats', array('order_id' => $child_order_id));
        }
    }

    // 3. Eliminar metadatos de la reserva
    $wpdb->delete($wpdb->prefix . 'postmeta', array('post_id' => $booking_id));
    
    // 4. Eliminar de la tabla de reservas
    $wpdb->delete($wpdb->prefix . 'yith_wcbk_booking_meta_lookup', array('booking_id' => $booking_id));
    
    // 5. Eliminar post principal (reserva)
    $deleted = wp_delete_post($booking_id, true);

    if ($deleted) {
        return ['response' => true];
    } else {
        return new WP_Error('delete_failed', 'No se pudo eliminar la reserva', array('status' => 500));
    }
}